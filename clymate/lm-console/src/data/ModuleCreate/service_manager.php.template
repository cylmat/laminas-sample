<?php

declare(strict_types=1);

namespace Application;

use Interop\Container\ContainerInterface;
use Laminas\ServiceManager\Factory\InvokableFactory;
use Laminas\ServiceManager\ServiceManager;


$serviceManager = new ServiceManager([
    'services'           => [],
    'invokables'         => [],
    'factories'          => [
        'invoke'        => InvokableFactory::class,
        'get_en_data'   => function(ContainerInterface $container, $requestedName) {
            return '3en_version';
        },
        'en_to_fr'      => function(ContainerInterface $container, $requestedName) {
            $data = $container->get('get_en_data');
            return new class($data) {
                private $data;
                function __construct($data) {$this->data = $data;}
                function __toString() {return preg_replace('/en/','fr',$this->data);}
            };
        }
    ],
    'abstract_factories' => [],
    'delegators'         => [],
    'aliases'            => [],
    'initializers'       => [],
    'lazy_services'      => [],
    'shared'             => [],
    'shared_by_default'  => false
]);